{"version":3,"file":"index-6d9715c6.js","sources":["../../../frontend/src/assets/github.svg","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/pages/NoPage.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/ArrayAnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/pages/oneshot/OneShot.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4e6ad5ae__\"","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>Bing + GPT + Enterprise data | Sample</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li>\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Chat\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Ask your data\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://aka.ms/entgptsearch\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                    <h4 className={styles.headerRightText}>Azure OpenAI + Cognitive Search</h4>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","const NoPage = () => {\n    return <h1>404</h1>;\n};\n\nexport default NoPage;\n","import { AskRequest, AskResponse, ChatRequest, ReadRequest, AskBingRequest, AskBingResponse } from \"./models\";\nimport {SpeechConfig, AudioConfig, SpeechSynthesizer, ResultReason} from \"microsoft-cognitiveservices-speech-sdk\"\n\n\nexport async function askBing(options: AskBingRequest): Promise<AskBingResponse> {\n    const response = await fetch(\"/askBing\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            question: options.question,\n            approach: options.approach,\n            overrides: {\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory\n            }\n        })\n    });\n\n    const parsedResponse: AskBingResponse = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse;\n}\n\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\n    const response = await fetch(\"/ask\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            question: options.question,\n            approach: options.approach,\n            overrides: {\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory\n            }\n        })\n    });\n\n    const parsedResponse: AskResponse = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse;\n}\n\nexport async function chatApi(options: ChatRequest): Promise<AskResponse> {\n    const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            history: options.history,\n            approach: options.approach,\n            overrides: {\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory,\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions\n            }\n        })\n    });\n\n    const parsedResponse: AskResponse = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse;\n}\n\nexport async function readApi(options: ReadRequest): Promise<void>{\n    const speech_key = \"e985cb0392ad45d59681a396b208ebcf\"\n    const speech_region = \"southcentralus\"\n    var speechConfig = SpeechConfig.fromSubscription(speech_key,speech_region);\n    const audioConfig = AudioConfig.fromDefaultSpeakerOutput();\n    // The language of the voice that speaks.\n    speechConfig.speechSynthesisVoiceName = \"zh-CN-YunxiNeural\"; \n    const synthesizer = new SpeechSynthesizer(speechConfig, audioConfig);\n    const text = options.answer;\n    const modified_text = text.replace(/\\[[^\\]]*\\]/g, \"\"); \n    console.log(options.answer);\n    synthesizer.speakTextAsync(modified_text,\n        function (result) {\n      if (result.reason === ResultReason.SynthesizingAudioCompleted) {\n        console.log(\"synthesis finished.\");\n      } else {\n        console.error(\"Speech synthesis canceled, \" + result.errorDetails +\n            \"\\nDid you set the speech resource key and region values?\");\n      }\n      synthesizer.close();\n    },\n        function (err) {\n      console.trace(\"err - \" + err);\n      synthesizer.close();\n    });\n\n}\nexport function getCitationFilePath(citation: string): string {\n    return `/content/${citation}`;\n}\n","export const enum Approaches {\n    RetrieveThenRead = \"rtr\",\n    ReadRetrieveRead = \"rrr\",\n    ReadDecomposeAsk = \"rda\"\n}\n\nexport const enum CustomApproaches {\n    BingSearch = \"bing\"\n}\n\nexport type AskRequestOverrides = {\n    semanticRanker?: boolean;\n    semanticCaptions?: boolean;\n    excludeCategory?: string;\n    top?: number;\n    temperature?: number;\n    promptTemplate?: string;\n    promptTemplatePrefix?: string;\n    promptTemplateSuffix?: string;\n    suggestFollowupQuestions?: boolean;\n};\n\nexport type AskRequest = {\n    question: string;\n    approach: Approaches;\n    overrides?: AskRequestOverrides;\n};\n\nexport type AskResponse = {\n    answer: string;\n    thoughts: string | null;\n    data_points: string[];\n    error?: string;\n};\n\nexport type AskBingRequest = {\n    question: string;\n    approach: CustomApproaches;\n    overrides?: AskRequestOverrides;\n};\n\nexport type AskBingResponse = {\n    answer: string;\n    thoughts: string | null;\n    data_points: string[];\n    error?: string;\n};\n\n\nexport type ChatTurn = {\n    user: string;\n    bot?: string;\n};\n\nexport type ChatRequest = {\n    history: ChatTurn[];\n    approach: Approaches;\n    overrides?: AskRequestOverrides;\n};\n\nexport type ReadRequest = {\n    answer: string;\n}\n\nexport type File = {\n    fileName: string;\n    filePath: string;\n    parsed: boolean;\n}","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: Citation[];\n    followupQuestions: string[];\n};\n\ntype Citation = {\n    id: number;\n    name: string;\n    path: string;\n};\n\nexport function parseAnswerToHtml(answer: string, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: Citation[] = [];\n    const followupQuestions: string[] = [];\n    // Extract any follow-up questions that might be in the answer\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\n        followupQuestions.push(content);\n        return \"\";\n    });\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    parsedAnswer = parsedAnswer.trim();\n\n    // find information in string like '[info1.txt](http://www.example.com/info1.txt): info1' and extract info1.txt and http://www.example.com/info1.txt to be used as a link\n    // parsedAnswer = parsedAnswer.replace(/\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g, (match, content, url) => {\n    //     const path = getCitationFilePath(content);\n    //     return renderToStaticMarkup(\n    //         <a className=\"supContainer\" title={content} onClick={() => onCitationClicked(path)}>\n    //             {content}\n    //         </a>\n    //     );\n    // });\n\n\n    // const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]+\\(([^\\)]+)\\)/g);\n    // const part_paths = parsedAnswer.split(/\\(([^\\)]+)\\)/g);\n\n    console.log(parts);\n\n    let citation_map = parsedAnswer.match(/\\[([^\\]]+)\\]+\\(([^\\)]+)\\)/g) ;\n    console.log(citation_map);\n\n    citation_map ? citation_map.map((citation, index) => {\n        const name = citation.split(\"]\")[0].replace(\"[\", \"\");\n        const path = citation.split(\"]\")[1].replace(\"(\", \"\").replace(\")\", \"\");\n        console.log(name);\n        console.log(path);\n        citations.push({\n            id: index,\n            name: name,\n            path: path\n        });\n    }) : [];\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 3 === 0) {\n            return part;\n        } else if(index % 3 == 1){\n            // let citationIndex: number;\n            let cite = citations.find((citation) => citation.name == part);\n\n            let citationIndex = cite? cite.id : -1;\n\n            if (citationIndex !== -1) {\n                citationIndex = cite ? cite.id + 1 : -1;\n            } else {\n                // citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            // console.log(parts);\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        } else{\n            return \"\";\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations,\n        followupQuestions\n    };\n}\n","import { renderToStaticMarkup } from \"react-dom/server\";\n\nfunction JsonDataDisplay(answer: Array<string>){\n\n  if(answer.length ==0){\n    return <table></table>;\n  }\n\n  const headers = Object.keys(answer[0]);\n  let records  = new Array();\n  answer.map((item) => {records.push(Object.values(item))});\n\n  const data = records;\n  const tableHeaders = headers.map((header, index) => (\n    <th key={index}>{header}</th>\n  ));\n\n  const tableRows = data.map((row, rowIndex) => (\n    <tr key={rowIndex}>\n      {row.map((cell: Array<string>, cellIndex: string) => (\n        <td key={cellIndex}>{cell}</td>\n      ))}\n    </tr>\n  ));\n\n  return (\n    <table>\n      <thead>\n        <tr>{tableHeaders}</tr>\n      </thead>\n      <tbody>{tableRows}</tbody>\n    </table>\n  );\n\n}\n\n\nexport function parseArrayAnswerToHtml(answer: Array<string>): string {\n    return renderToStaticMarkup(JsonDataDisplay(answer));\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { AskResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { parseArrayAnswerToHtml } from \"./ArrayAnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: AskResponse;\n    isSelected?: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    onReadAnswerClicked: () => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    onReadAnswerClicked,\n    showFollowupQuestions\n}: Props) => {\n    if(typeof answer.answer === \"string\"){\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, onCitationClicked), [answer]);\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.thoughts}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.data_points.length}\n                        />\n                        <IconButton\n                            style={{color: \"black\"}}\n                            iconProps={{ iconName: \"ReadOutLoud\"}}\n                            title=\"Read answer\"\n                            ariaLabel=\"Read answer\"\n                            onClick={() => onReadAnswerClicked()}\n                            disabled= {!answer.answer}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>来源:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            // const path = getCitationFilePath(x);\n                            const path = x.path;\n                            return (\n                                <a key={i} className={styles.citation} title={x.name} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x.name}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>您可能还想问:</span>\n                        {parsedAnswer.followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n                    }else if(Array.isArray(answer.answer)){\n                        let arrayAnswer:Array<string> = answer.answer;\n                        const parsedAnswer = useMemo(() => parseArrayAnswerToHtml(arrayAnswer), [answer]);\n                        const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer);\n                    \n                        return (\n                            <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n                                <Stack.Item>\n                                    <Stack horizontal horizontalAlign=\"space-between\">\n                                        <AnswerIcon />\n                                        <div>\n                                            <IconButton\n                                                style={{ color: \"black\" }}\n                                                iconProps={{ iconName: \"Lightbulb\" }}\n                                                title=\"Show thought process\"\n                                                ariaLabel=\"Show thought process\"\n                                                onClick={() => onThoughtProcessClicked()}\n                                                disabled={!answer.thoughts}\n                                            />\n                                            <IconButton\n                                                style={{ color: \"black\" }}\n                                                iconProps={{ iconName: \"ClipboardList\" }}\n                                                title=\"Show supporting content\"\n                                                ariaLabel=\"Show supporting content\"\n                                                onClick={() => onSupportingContentClicked()}\n                                                disabled={!answer.data_points.length}\n                                            />\n                                            <IconButton\n                                                style={{color: \"black\"}}\n                                                iconProps={{ iconName: \"ReadOutLoud\"}}\n                                                title=\"Read answer\"\n                                                ariaLabel=\"Read answer\"\n                                                onClick={() => onReadAnswerClicked()}\n                                                disabled= {!answer.answer}\n                                            />\n                                        </div>\n                                    </Stack>\n                                </Stack.Item>\n                    \n                                <Stack.Item grow>\n                                    <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n                                </Stack.Item>\n                            </Stack>\n                        );\n                    }else{\n                        return null;\n                    }\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        正在生成回答\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useState, useEffect } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Send28Filled, BookOpenMicrophone28Regular } from \"@fluentui/react-icons\";\nimport {SpeechConfig, AudioConfig, CancellationDetails, ResultReason, SpeechRecognizer, CancellationReason} from \"microsoft-cognitiveservices-speech-sdk\"\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            console.log('send disabled');\n            console.log('question: ' + question);\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const speechToText = () => {\n        const speech_key = \"e985cb0392ad45d59681a396b208ebcf\"\n        const speech_region = \"southcentralus\"\n        var speechConfig = SpeechConfig.fromSubscription(speech_key,speech_region);\n        const audioConfig = AudioConfig.fromDefaultMicrophoneInput();\n        speechConfig.speechRecognitionLanguage = \"zh-CN\";\n        const speechRecognizer = new SpeechRecognizer(speechConfig, audioConfig);\n        speechRecognizer.recognizeOnceAsync(result => {\n            switch (result.reason) {\n                case ResultReason.RecognizedSpeech:\n                    console.log(`RECOGNIZED: Text=${result.text}`);\n                    setQuestion(result.text);\n                    break;\n                case ResultReason.NoMatch:\n                    console.log(\"NOMATCH: Speech could not be recognized.\");\n                    break;\n                case ResultReason.Canceled:\n                    const cancellation = CancellationDetails.fromResult(result);\n                    console.log(`CANCELED: Reason=${cancellation.reason}`);\n    \n                    if (cancellation.reason == CancellationReason.Error) {\n                        console.log(`CANCELED: ErrorCode=${cancellation.ErrorCode}`);\n                        console.log(`CANCELED: ErrorDetails=${cancellation.errorDetails}`);\n                        console.log(\"CANCELED: Did you set the speech resource key and region values?\");\n                    }\n                    break;\n            }\n            speechRecognizer.close();\n        });\n    }\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const sendQuestionDisabled = disabled || !question.trim();\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <div\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\n                    aria-label=\"语音输入\"\n                    onClick={speechToText}\n                >\n                    <BookOpenMicrophone28Regular primaryFill=\"rgba(115, 118, 225, 1)\" />\n                </div>\n                <div\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\n                    aria-label=\"提问按钮\"\n                    onClick={sendQuestion}\n                >\n                    <Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />\n                </div>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"2022-23赛季，NBA哪只球队常规赛战绩最好?\",\n        value: \"2022-23赛季，NBA哪只球队常规赛战绩最好?\"\n    },\n    { text: \"What's the main goal of gpt model ?\", value: \"What's the main goal of gpt model ?\" },\n    { text: \"涨幅最高的三只股票是？\", value: \"查询出涨幅最高的三只股票\" }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","type ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n    url: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    var content = parts.slice(1).join(\": \") ? parts.slice(1).join(\": \") : \"No content\";\n    \n    //Extrace string in '<>' in content, example: info1.txt: abc <http://www.google.com>\n    const url = content.match(/<([^>]+)>/);\n\n    //Replace string in '<>' in content, example: info1.txt: abc <http://www.google.com>\n    content = content.replace(/<([^>]+)>/g, \"\");\n    \n    \n\n    return {\n        title,\n        content,\n        url: url ? url[1] : \"\"\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[];\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    if(Array.isArray(supportingContent)){\n        return (\n            <ul className={styles.supportingContentNavList}>\n                {supportingContent.map((x, i) => {\n                    const parsed = parseSupportingContentItem(x);\n    \n                    return (\n                        <li className={styles.supportingContentItem}>\n                            <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                            <p className={styles.supportingContentItemText}>{parsed.content}</p>\n                            <a className={styles.supportingContentItemText} href={parsed.url} target=\"_blank\">{parsed.url}</a>\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }else if(typeof supportingContent === \"string\"){\n        return (\n            <ul className={styles.supportingContentNavList}>\n                <li className={styles.supportingContentItem}>\n                    <p className={styles.supportingContentItemText}>{supportingContent}</p>\n                </li>\n            </ul>\n        );\n    }else{\n        return (<ul></ul>)\n    }\n\n    \n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Pivot, PivotItem } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { AskResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: AskResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.data_points.length;\n    const isDisabledCitationTab: boolean = !activeCitation;\n\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"思维过程\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"支持内容\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"引用\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                <iframe title=\"引用\" src={activeCitation} width=\"100%\" height={citationHeight} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Text } from \"@fluentui/react\";\nimport { Settings24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`} onClick={onClick}>\n            <Settings24Regular />\n            <Text>{\"开发人员配置\"}</Text>\n        </div>\n    );\n};\n","import { useRef, useState } from \"react\";\nimport { Checkbox, ChoiceGroup, IChoiceGroupOption, Panel, DefaultButton, Spinner, TextField, SpinButton } from \"@fluentui/react\";\n\nimport styles from \"./OneShot.module.css\";\n\nimport { askApi, Approaches, AskResponse, AskRequest } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\n\nconst OneShot = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [approach, setApproach] = useState<Approaches>(Approaches.ReadDecomposeAsk);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(false);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<AskResponse>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const request: AskRequest = {\n                question,\n                approach,\n                overrides: {\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\n                    promptTemplatePrefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                    promptTemplateSuffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\n                    top: retrieveCount,\n                    semanticRanker: useSemanticRanker,\n                    semanticCaptions: useSemanticCaptions\n                }\n            };\n            const result = await askApi(request);\n            setAnswer(result);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplatePrefix(newValue || \"\");\n    };\n\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplateSuffix(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onApproachChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\n        setApproach((option?.key as Approaches) || Approaches.RetrieveThenRead);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onReadAnswerClicked = () => {\n        alert(\"onReadAnswerClicked\")\n    }\n\n    const approaches: IChoiceGroupOption[] = [\n        {\n            key: Approaches.RetrieveThenRead,\n            text: \"Retrieve-Then-Read\"\n        },\n        {\n            key: Approaches.ReadRetrieveRead,\n            text: \"Read-Retrieve-Read\"\n        },\n        {\n            key: Approaches.ReadDecomposeAsk,\n            text: \"Read-Decompose-Ask\"\n        }\n    ];\n\n    return (\n        <div className={styles.oneshotContainer}>\n            <div className={styles.oneshotTopSection}>\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                <h1 className={styles.oneshotTitle}>Ask your data</h1>\n                <div className={styles.oneshotQuestionInput}>\n                    <QuestionInput\n                        placeholder=\"示例:查询出涨幅最高的三只股票\"\n                        disabled={isLoading}\n                        onSend={question => makeApiRequest(question)}\n                    />\n                </div>\n            </div>\n            <div className={styles.oneshotBottomSection}>\n                {isLoading && <Spinner label=\"正在生成回答\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                            onReadAnswerClicked={() => onReadAnswerClicked()}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.oneshotAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"配置\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <ChoiceGroup\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"方式\"\n                    options={approaches}\n                    defaultSelectedKey={approach}\n                    onChange={onApproachChange}\n                />\n\n                {(approach === Approaches.RetrieveThenRead || approach === Approaches.ReadDecomposeAsk) && (\n                    <TextField\n                        className={styles.oneshotSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"更改提问模板\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n                )}\n\n                {approach === Approaches.ReadRetrieveRead && (\n                    <>\n                        <TextField\n                            className={styles.oneshotSettingsSeparator}\n                            defaultValue={promptTemplatePrefix}\n                            label=\"更改提问前缀模板\"\n                            multiline\n                            autoAdjustHeight\n                            onChange={onPromptTemplatePrefixChange}\n                        />\n                        <TextField\n                            className={styles.oneshotSettingsSeparator}\n                            defaultValue={promptTemplateSuffix}\n                            label=\"更改提问后缀模板\"\n                            multiline\n                            autoAdjustHeight\n                            onChange={onPromptTemplateSuffixChange}\n                        />\n                    </>\n                )}\n\n                <SpinButton\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"最多从搜索中返回的条目数量:\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                />\n                <TextField className={styles.oneshotSettingsSeparator} label=\"排除类别\" onChange={onExcludeCategoryChanged} />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticRanker}\n                    label=\"使用语义搜索\"\n                    onChange={onUseSemanticRankerChange}\n                />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticCaptions}\n                    label=\"使用查询上下文摘要而不是整个文档\"\n                    onChange={onUseSemanticCaptionsChange}\n                    disabled={!useSemanticRanker}\n                />\n            </Panel>\n        </div>\n    );\n};\n\nexport default OneShot;\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import { Text } from \"@fluentui/react\";\nimport { Delete24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\n            <Delete24Regular />\n            <Text>{\"清空对话\"}</Text>\n        </div>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { chatApi, Approaches, AskResponse, ChatRequest, ChatTurn, ReadRequest, readApi } from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(false);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(true);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\n            const request: ChatRequest = {\n                history: [...history, { user: question, bot: undefined }],\n                approach: Approaches.ReadRetrieveRead,\n                overrides: {\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\n                    top: retrieveCount,\n                    semanticRanker: useSemanticRanker,\n                    semanticCaptions: useSemanticCaptions,\n                    suggestFollowupQuestions: useSuggestFollowupQuestions\n                }\n            };\n            const result = await chatApi(request);\n            setAnswers([...answers, [question, result]]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onReadAnswer = async (answer: AskResponse, index: number) => {\n        setSelectedAnswer(index);\n        try {\n            const request: ReadRequest = {\n                answer: answer.answer\n            };\n            await readApi(request);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with your documents</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {answers.map((answer, index) => (\n                                <div key={index}>\n                                    <UserChatMessage message={answer[0]} />\n                                    <div className={styles.chatMessageGpt}>\n                                        <Answer\n                                            key={index}\n                                            answer={answer[1]}\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                            onCitationClicked={c => onShowCitation(c, index)}\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            onReadAnswerClicked={() => onReadAnswer(answer[1], index)}\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                        />\n                                    </div>\n                                </div>\n                            ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"输入问题\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"配置\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"更改提问模板\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"最多从搜索中返回的条目数量:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n                    <TextField className={styles.chatSettingsSeparator} label=\"排除类别\" onChange={onExcludeCategoryChanged} />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"使用语义搜索\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"使用查询上下文摘要而不是整个文档\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"建议后续问题\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { initializeFileTypeIcons } from '@fluentui/react-file-type-icons';\ninitializeFileTypeIcons(/* optional base url */);\n\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport NoPage from \"./pages/NoPage\";\nimport OneShot from \"./pages/oneshot/OneShot\";\nimport Chat from \"./pages/chat/Chat\";\n\ninitializeIcons();\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <Routes>\n                <Route path=\"/\" element={<Layout />}>\n                    <Route index element={<Chat />} />\n                    <Route path=\"qa\" element={<OneShot />} />\n                    <Route path=\"*\" element={<NoPage />} />\n                </Route>\n            </Routes>\n        </HashRouter>\n    );\n}\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n"],"names":["github","Layout","jsxs","styles","jsx","Link","NavLink","isActive","Outlet","NoPage","askApi","options","response","_a","_b","_c","_d","_e","_f","_g","_h","parsedResponse","chatApi","_i","readApi","speech_key","speech_region","speechConfig","SpeechConfig","audioConfig","AudioConfig","synthesizer","SpeechSynthesizer","modified_text","result","ResultReason","err","getCitationFilePath","citation","Approaches","parseAnswerToHtml","answer","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","parts","citation_map","index","name","path","part","cite","citationIndex","renderToStaticMarkup","JsonDataDisplay","headers","records","item","data","tableHeaders","header","tableRows","row","rowIndex","cell","cellIndex","parseArrayAnswerToHtml","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","onReadAnswerClicked","showFollowupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","i","arrayAnswer","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","speechToText","speechRecognizer","SpeechRecognizer","cancellation","CancellationDetails","CancellationReason","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","BookOpenMicrophone28Regular","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","parseSupportingContentItem","title","url","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","Text","OneShot","isConfigPanelOpen","setIsConfigPanelOpen","approach","setApproach","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","lastQuestionRef","useRef","isLoading","setIsLoading","setError","setAnswer","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","makeApiRequest","request","e","onPromptTemplateChange","onPromptTemplatePrefixChange","onPromptTemplateSuffixChange","onRetrieveCountChange","onApproachChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","example","onShowCitation","onToggleTab","tab","approaches","Spinner","Panel","DefaultButton","ChoiceGroup","Fragment","SpinButton","Checkbox","UserChatMessage","message","ClearChatButton","Delete24Regular","Chat","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","chatMessageStreamEnd","selectedAnswer","setSelectedAnswer","answers","setAnswers","a","clearChat","useEffect","onUseSuggestFollowupQuestionsChange","onReadAnswer","c","q","SparkleFilled","initializeFileTypeIcons","initializeIcons","App","HashRouter","Routes","Route","ReactDOM","React"],"mappings":"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"}