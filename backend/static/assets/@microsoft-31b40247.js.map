{"version":3,"file":"@microsoft-31b40247.js","sources":["../../../frontend/node_modules/@microsoft/load-themed-styles/lib-es6/index.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\nvar now = function () {\n    return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\nfunction measure(func) {\n    var start = now();\n    func();\n    var end = now();\n    _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\nfunction initializeThemeState() {\n    var state = _root.__themeState__ || {\n        theme: undefined,\n        lastStyleElement: undefined,\n        registeredStyles: []\n    };\n    if (!state.runState) {\n        state = __assign(__assign({}, state), { perf: {\n                count: 0,\n                duration: 0\n            }, runState: {\n                flushTimer: 0,\n                mode: 0 /* Mode.sync */,\n                buffer: []\n            } });\n    }\n    if (!state.registeredThemableStyles) {\n        state = __assign(__assign({}, state), { registeredThemableStyles: [] });\n    }\n    _root.__themeState__ = state;\n    return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\nexport function loadStyles(styles, loadAsync) {\n    if (loadAsync === void 0) { loadAsync = false; }\n    measure(function () {\n        var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n        var _a = _themeState.runState, mode = _a.mode, buffer = _a.buffer, flushTimer = _a.flushTimer;\n        if (loadAsync || mode === 1 /* Mode.async */) {\n            buffer.push(styleParts);\n            if (!flushTimer) {\n                _themeState.runState.flushTimer = asyncLoadStyles();\n            }\n        }\n        else {\n            applyThemableStyles(styleParts);\n        }\n    });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\nexport function configureLoadStyles(loadStylesFn) {\n    _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\nexport function configureRunMode(mode) {\n    _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\nexport function flush() {\n    measure(function () {\n        var styleArrays = _themeState.runState.buffer.slice();\n        _themeState.runState.buffer = [];\n        var mergedStyleArray = [].concat.apply([], styleArrays);\n        if (mergedStyleArray.length > 0) {\n            applyThemableStyles(mergedStyleArray);\n        }\n    });\n}\n/**\n * register async loadStyles\n */\nfunction asyncLoadStyles() {\n    return setTimeout(function () {\n        _themeState.runState.flushTimer = 0;\n        flush();\n    }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray, styleRecord) {\n    if (_themeState.loadStyles) {\n        _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n    }\n    else {\n        registerStyles(stylesArray);\n    }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nexport function loadTheme(theme) {\n    _themeState.theme = theme;\n    // reload styles.\n    reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\nexport function clearStyles(option) {\n    if (option === void 0) { option = 3 /* ClearStyleOptions.all */; }\n    if (option === 3 /* ClearStyleOptions.all */ || option === 2 /* ClearStyleOptions.onlyNonThemable */) {\n        clearStylesInternal(_themeState.registeredStyles);\n        _themeState.registeredStyles = [];\n    }\n    if (option === 3 /* ClearStyleOptions.all */ || option === 1 /* ClearStyleOptions.onlyThemable */) {\n        clearStylesInternal(_themeState.registeredThemableStyles);\n        _themeState.registeredThemableStyles = [];\n    }\n}\nfunction clearStylesInternal(records) {\n    records.forEach(function (styleRecord) {\n        var styleElement = styleRecord && styleRecord.styleElement;\n        if (styleElement && styleElement.parentElement) {\n            styleElement.parentElement.removeChild(styleElement);\n        }\n    });\n}\n/**\n * Reloads styles.\n */\nfunction reloadStyles() {\n    if (_themeState.theme) {\n        var themableStyles = [];\n        for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n            var styleRecord = _a[_i];\n            themableStyles.push(styleRecord.themableStyle);\n        }\n        if (themableStyles.length > 0) {\n            clearStyles(1 /* ClearStyleOptions.onlyThemable */);\n            applyThemableStyles([].concat.apply([], themableStyles));\n        }\n    }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nexport function detokenize(styles) {\n    if (styles) {\n        styles = resolveThemableArray(splitStyles(styles)).styleString;\n    }\n    return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray) {\n    var theme = _themeState.theme;\n    var themable = false;\n    // Resolve the array of theming instructions to an array of strings.\n    // Then join the array to produce the final CSS string.\n    var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n        var themeSlot = currentValue.theme;\n        if (themeSlot) {\n            themable = true;\n            // A theming annotation. Resolve it.\n            var themedValue = theme ? theme[themeSlot] : undefined;\n            var defaultValue = currentValue.defaultValue || 'inherit';\n            // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n            // Allow the themedValue to be undefined to explicitly request the default value.\n            if (theme &&\n                !themedValue &&\n                console &&\n                !(themeSlot in theme) &&\n                typeof DEBUG !== 'undefined' &&\n                DEBUG) {\n                console.warn(\"Theming value not provided for \\\"\".concat(themeSlot, \"\\\". Falling back to \\\"\").concat(defaultValue, \"\\\".\"));\n            }\n            return themedValue || defaultValue;\n        }\n        else {\n            // A non-themable string. Preserve it.\n            return currentValue.rawString;\n        }\n    });\n    return {\n        styleString: resolvedArray.join(''),\n        themable: themable\n    };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nexport function splitStyles(styles) {\n    var result = [];\n    if (styles) {\n        var pos = 0; // Current position in styles.\n        var tokenMatch = void 0;\n        while ((tokenMatch = _themeTokenRegex.exec(styles))) {\n            var matchIndex = tokenMatch.index;\n            if (matchIndex > pos) {\n                result.push({\n                    rawString: styles.substring(pos, matchIndex)\n                });\n            }\n            result.push({\n                theme: tokenMatch[1],\n                defaultValue: tokenMatch[2] // May be undefined\n            });\n            // index of the first character after the current match\n            pos = _themeTokenRegex.lastIndex;\n        }\n        // Push the rest of the string after the last match.\n        result.push({\n            rawString: styles.substring(pos)\n        });\n    }\n    return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray) {\n    if (typeof document === 'undefined') {\n        return;\n    }\n    var head = document.getElementsByTagName('head')[0];\n    var styleElement = document.createElement('style');\n    var _a = resolveThemableArray(styleArray), styleString = _a.styleString, themable = _a.themable;\n    styleElement.setAttribute('data-load-themed-styles', 'true');\n    if (_styleNonce) {\n        styleElement.setAttribute('nonce', _styleNonce);\n    }\n    styleElement.appendChild(document.createTextNode(styleString));\n    _themeState.perf.count++;\n    head.appendChild(styleElement);\n    var ev = document.createEvent('HTMLEvents');\n    ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\n    ev.args = {\n        newStyle: styleElement\n    };\n    document.dispatchEvent(ev);\n    var record = {\n        styleElement: styleElement,\n        themableStyle: styleArray\n    };\n    if (themable) {\n        _themeState.registeredThemableStyles.push(record);\n    }\n    else {\n        _themeState.registeredStyles.push(record);\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["__assign","this","t","s","i","n","p","_root","_styleNonce","_themeState","initializeThemeState","state","applyThemableStyles","stylesArray","styleRecord","resolveThemableArray","registerStyles","loadTheme","theme","reloadStyles","clearStyles","option","clearStylesInternal","records","styleElement","themableStyles","_i","_a","splitStyleArray","themable","resolvedArray","currentValue","themeSlot","themedValue","defaultValue","styleArray","head","styleString","ev","record"],"mappings":"AAEA,IAAIA,EAAYC,YAAQA,WAAK,UAAa,UAAY,CAClD,OAAAD,EAAW,OAAO,QAAU,SAASE,EAAG,CACpC,QAASC,EAAGC,EAAI,EAAGC,EAAI,UAAU,OAAQD,EAAIC,EAAGD,IAAK,CACjDD,EAAI,UAAUC,CAAC,EACf,QAASE,KAAKH,EAAO,OAAO,UAAU,eAAe,KAAKA,EAAGG,CAAC,IAC1DJ,EAAEI,CAAC,EAAIH,EAAEG,CAAC,GAElB,OAAOJ,CACf,EACWF,EAAS,MAAM,KAAM,SAAS,CACzC,EAGIO,EAAQ,OAAO,OAAW,IAAc,OAAS,OAEjDC,EAAcD,GAASA,EAAM,aAAeA,EAAM,YAAY,MAC9DE,EAAcC,EAAoB,EAiBtC,SAASA,GAAuB,CAC5B,IAAIC,EAAQJ,EAAM,gBAAkB,CAChC,MAAO,OACP,iBAAkB,OAClB,iBAAkB,CAAE,CAC5B,EACI,OAAKI,EAAM,WACPA,EAAQX,EAASA,EAAS,CAAE,EAAEW,CAAK,EAAG,CAAE,KAAM,CACtC,MAAO,EACP,SAAU,CACb,EAAE,SAAU,CACT,WAAY,EACZ,KAAM,EACN,OAAQ,CAAE,CACb,CAAA,CAAE,GAENA,EAAM,2BACPA,EAAQX,EAASA,EAAS,CAAE,EAAEW,CAAK,EAAG,CAAE,yBAA0B,CAAE,CAAA,CAAE,GAE1EJ,EAAM,eAAiBI,EAChBA,CACX,CAkEA,SAASC,EAAoBC,EAAaC,EAAa,CAC/CL,EAAY,WACZA,EAAY,WAAWM,EAAqBF,CAAW,EAAE,YAAaA,CAAW,EAGjFG,EAAeH,CAAW,CAElC,CAMO,SAASI,EAAUC,EAAO,CAC7BT,EAAY,MAAQS,EAEpBC,GACJ,CAMO,SAASC,EAAYC,EAAQ,CAC5BA,IAAW,SAAUA,EAAS,IAC9BA,IAAW,GAAiCA,IAAW,KACvDC,EAAoBb,EAAY,gBAAgB,EAChDA,EAAY,iBAAmB,KAE/BY,IAAW,GAAiCA,IAAW,KACvDC,EAAoBb,EAAY,wBAAwB,EACxDA,EAAY,yBAA2B,GAE/C,CACA,SAASa,EAAoBC,EAAS,CAClCA,EAAQ,QAAQ,SAAUT,EAAa,CACnC,IAAIU,EAAeV,GAAeA,EAAY,aAC1CU,GAAgBA,EAAa,eAC7BA,EAAa,cAAc,YAAYA,CAAY,CAE/D,CAAK,CACL,CAIA,SAASL,GAAe,CACpB,GAAIV,EAAY,MAAO,CAEnB,QADIgB,EAAiB,CAAA,EACZC,EAAK,EAAGC,EAAKlB,EAAY,yBAA0BiB,EAAKC,EAAG,OAAQD,IAAM,CAC9E,IAAIZ,EAAca,EAAGD,CAAE,EACvBD,EAAe,KAAKX,EAAY,aAAa,EAE7CW,EAAe,OAAS,IACxBL,EAAY,CAAC,EACbR,EAAoB,CAAE,EAAC,OAAO,MAAM,CAAE,EAAEa,CAAc,CAAC,GAGnE,CAeA,SAASV,EAAqBa,EAAiB,CAC3C,IAAIV,EAAQT,EAAY,MACpBoB,EAAW,GAGXC,GAAiBF,GAAmB,CAAE,GAAE,IAAI,SAAUG,EAAc,CACpE,IAAIC,EAAYD,EAAa,MAC7B,GAAIC,EAAW,CACXH,EAAW,GAEX,IAAII,EAAcf,EAAQA,EAAMc,CAAS,EAAI,OACzCE,EAAeH,EAAa,cAAgB,UAGhD,OAAIb,GACA,CAACe,GACD,SACA,EAAED,KAAad,IACf,OAAO,MAAU,KACjB,OACA,QAAQ,KAAK,mCAAoC,OAAOc,EAAW,sBAAwB,EAAE,OAAOE,EAAc,IAAK,CAAC,EAErHD,GAAeC,MAItB,QAAOH,EAAa,SAEhC,CAAK,EACD,MAAO,CACH,YAAaD,EAAc,KAAK,EAAE,EAClC,SAAUD,CAClB,CACA,CAqCA,SAASb,EAAemB,EAAY,CAChC,GAAI,SAAO,SAAa,KAGxB,KAAIC,EAAO,SAAS,qBAAqB,MAAM,EAAE,CAAC,EAC9CZ,EAAe,SAAS,cAAc,OAAO,EAC7CG,EAAKZ,EAAqBoB,CAAU,EAAGE,EAAcV,EAAG,YAAaE,EAAWF,EAAG,SACvFH,EAAa,aAAa,0BAA2B,MAAM,EACvDhB,GACAgB,EAAa,aAAa,QAAShB,CAAW,EAElDgB,EAAa,YAAY,SAAS,eAAea,CAAW,CAAC,EAC7D5B,EAAY,KAAK,QACjB2B,EAAK,YAAYZ,CAAY,EAC7B,IAAIc,EAAK,SAAS,YAAY,YAAY,EAC1CA,EAAG,UAAU,cAAe,GAAwB,EAAK,EACzDA,EAAG,KAAO,CACN,SAAUd,CAClB,EACI,SAAS,cAAcc,CAAE,EACzB,IAAIC,EAAS,CACT,aAAcf,EACd,cAAeW,CACvB,EACQN,EACApB,EAAY,yBAAyB,KAAK8B,CAAM,EAGhD9B,EAAY,iBAAiB,KAAK8B,CAAM,EAEhD","x_google_ignoreList":[0]}